{ config, lib, pkgs, ...}:
let
  inherit (lib.options) mkEnableOption mkOption;
  inherit (lib.modules) mkIf;

  cfg = config.programs.river;

  systemdIntegration = ''
    dbus-update-activation-environment --systemd DISPLAY WAYLAND_DISPLAY XDG_CURRENT_DESKTOP
    systemctl --user start river-session.target
  '';

  mkBindings = bindings: command: mode:
    lib.concatStrings
      (lib.mapAttrsToList
        (bind: action: "riverctl ${command} ${mode} ${bind} ${action}\n")
        bindings);

  configFile = pkgs.writeShellScript "init" ''
    # Auto-generated by Nix.
    riverctl attach-mode ${cfg.config.attachMode}
    riverctl background-color ${cfg.config.backgroundColor}
    riverctl border-color-focused ${cfg.config.border.color.focused}
    riverctl border-color-unfocused ${cfg.config.border.color.unfocused}
    riverctl border-color-urgent ${cfg.config.border.color.urgent}
    riverctl border-width ${toString cfg.config.border.width}
    riverctl focus-follows-cursor ${cfg.config.cursor.followFocus}
    # TODO: Enable when supported: riverctl hide-cursor timeout ${toString cfg.config.cursor.hide}
    # TODO: Enable when supported: riverctl hide-cursor when-typing ${toString cfg.config.cursor.hideWhenTyping}
    riverctl set-cursor-warp ${cfg.config.cursor.warp}
    riverctl set-repeat ${toString cfg.config.repeat.rate} ${toString cfg.config.repeat.delay}

    riverctl default-layout ${cfg.layoutGenerator.defaultNamespace}

    riverctl declare-mode passthrough

    ${mkBindings cfg.bindings.normal "map" "normal"}
    ${mkBindings cfg.bindings.pointer "map-pointer" "normal"}
    ${mkBindings cfg.bindings.locked "map" "locked"}
    ${mkBindings cfg.bindings.passthrough "map" "passthrough"}

    ${cfg.extraConfig}

    ${lib.optionalString cfg.systemdIntegration systemdIntegration}
    exec ${cfg.layoutGenerator.command}
  '';
in {
  options.programs.river = with lib; {
    enable = mkEnableOption "river";

    systemdIntegration = mkOption {
      type = types.bool;
      default = pkgs.stdenv.isLinux;
      description = ''
        Whether to enable <filename>river-session.target</filename> on
        river startup. This links to <filename>graphical-session.target</filename>
      '';
    };

    layoutGenerator = {
      command = mkOption {
        type = types.str;
        default = "${pkgs.river}/bin/rivertile";
      };
      defaultNamespace = mkOption {
        type = types.str;
        default = "rivertile";
      };
    };

    bindings = {
      normal = mkOption { type = types.attrs; default = {}; };
      pointer = mkOption { type = types.attrs; default = {}; };
      locked = mkOption { type = types.attrs; default = {}; };
      passthrough = mkOption { type = types.attrs; default = {}; };
    };

    config = {
      attachMode = mkOption {
        type = types.enum [ "top" "bottom" ];
        default = "top";
        description = "Configure where new views should attach to the view stack";
      };

      backgroundColor = mkOption {
        type = types.str;
        default = "0x002b36";
        description = "Background color in 0xrrggbb format.";
      };

      border = {
        color = {
          focused = mkOption {
            type = types.str;
            default = "0x93a1a1";
          };

          unfocused = mkOption {
            type = types.str;
            default = "0x586e75";
          };

          urgent = mkOption {
            type = types.str;
            default = "0xdc322f";
          };
        };

        width = mkOption {
          type = types.int;
          default = 2;
        };
      };

      cursor = {
        followFocus = mkOption {
          type = types.enum [ "disabled" "normal" "always" ];
          default = "disabled";
        };

        hide = mkOption {
          type = types.int;
          default = 0;
        };

        hideWhenTyping = mkOption {
          type = types.enum [ "enabled" "disabled" ];
          default = "disabled";
        };

        warp = mkOption {
          type = types.enum [ "disabled" "on-output-change" ];
          default = "disabled";
        };
      };

      repeat = {
        rate = mkOption {
          type = types.int;
          default = 25;
        };

        delay = mkOption {
          type = types.int;
          default = 600;
        };
      };
    };

    extraConfig = mkOption {
      type = types.lines;
      default = "";
      description = "Extra lines appended to <filename>$XDG_CONFIG_HOME/river/init</filename>";
    };
  };

  config = mkIf cfg.enable {
    systemd.user.targets.river-session = mkIf cfg.systemdIntegration {
      Unit = {
        Description = "River compositor session";
        BindsTo = [ "graphical-session.target" ];
        Wants = [ "graphical-session-pre.target" ];
        After = [ "graphical-session-pre.target" ];
      };
    };

    xdg.configFile."river/init".source = configFile;
  };
}
